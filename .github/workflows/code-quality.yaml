name: Code quality checks

on:
  push:
    branches:
      - master
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 0 * * *"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9]
        exclude:
          - os: windows-latest
            python-version: 3.7
          - os: windows-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            python-version: 3.8
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - uses: actions/cache@v2.1.3
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-${{ matrix.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock', 'poetry.toml') }}
      - name: Configure poetry for ci
        run: |
          poetry config virtualenvs.in-project false --local
          poetry config virtualenvs.path ~/.virtualenvs --local
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install
      - name: Test with pytest
        run: |
          poetry run pytest
      - name: Test the examples
        run: |
          poetry run ./tests/test_examples

  staticPython:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        command:
          - poetry run bandit -r open_alchemy -s B101,B303,B310
          - poetry run rstcheck -r docs
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install poetry
        run: pip install poetry
      - uses: actions/cache@v2.1.3
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock', 'poetry.toml') }}
      - name: Configure poetry for ci
        run: |
          poetry config virtualenvs.in-project false --local
          poetry config virtualenvs.path ~/.virtualenvs --local
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install
      - name: Run static code analyser
        run: |
          ${{ matrix.command }}

  staticNode:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        command:
          - npx cspell "open_alchemy/**/*.py" "open_alchemy/**/*.json" "open_alchemy/**/*.j2" "docs/**/*.rst" "docs/**/*/yml" "docs/**/*.yaml" "tests/**/*.py" "*.yaml" "*.json" "*.yml" "examples/**/*.py" "examples/**/*.yaml" "examples/**/*.yml"
          - find examples -name "*spec.yml" ! -path "*/remote/*" | xargs -n 1 sh -c 'npx swagger-cli validate $0 || exit 255'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x
      - name: Install dependencies
        run: npm install cspell @apidevtools/swagger-cli
      - name: Run static code analyser
        run: |
          ${{ matrix.command }}
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: pre-commit/action@v2.0.0

  build:
    runs-on: ubuntu-latest
    needs:
      - pre-commit
      - test
      - staticNode
      - staticPython
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install poetry
        run: pip install poetry
      - uses: actions/cache@v2.1.3
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock', 'poetry.toml') }}
      - name: Configure poetry for ci
        run: |
          poetry config virtualenvs.in-project false --local
          poetry config virtualenvs.path ~/.virtualenvs --local
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install
      - name: Build packages
        run: poetry build
      - name: Upload artifacts for release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2.2.1
        with:
          name: wheel
          path: dist/
      - name: Build the documentation
        run: |
          cd docs
          poetry run make html
      - name: Upload documentation for release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2.2.1
        with:
          name: docs
          path: docs/build/html/

  release-test-pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    steps:
      - name: Retrieve packages
        uses: actions/download-artifact@v2.0.7
        with:
          name: wheel
          path: dist/
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/

  test-production-test-pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - release-test-pypi
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: prepare tests
        working-directory: tests/production
        run: |
          ./prepare.sh
      - name: install dependencies
        env:
          PYPI_MIRROR: https://test.pypi.org/simple/
        working-directory: tests/production
        run: |
          pipenv install --dev
      - name: run tests
        working-directory: tests/production
        run: |
          pipenv run test

  release-pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test-production-test-pypi
    steps:
      - name: Retrieve packages
        uses: actions/download-artifact@v2.0.7
        with:
          name: wheel
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          password: ${{ secrets.pypi_password }}
          repository_url: https://upload.pypi.org/legacy/

  test-production-pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - release-pypi
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: prepare tests
        working-directory: tests/production
        run: |
          ./prepare.sh
      - name: install dependencies
        working-directory: tests/production
        env:
          PYPI_MIRROR: https://pypi.org/simple/
        run: |
          pipenv install --dev
      - name: run tests
        working-directory: tests/production
        run: |
          pipenv run test

  release-github:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test-production-pypi
    steps:
      - name: Get version from tag
        id: tag_name
        run: |
          echo ::set-output name=current_version::${GITHUB_REF#refs/tags/v}
        shell: bash
      - uses: actions/checkout@v2
      - name: Get latest Changelog Entry
        id: changelog_entry
        uses: mindsers/changelog-reader-action@v2
        with:
          version: v${{ steps.tag_name.outputs.current_version }}
          path: ./CHANGELOG.md
      - name: Retrieve packages
        uses: actions/download-artifact@v2.0.7
        with:
          name: wheel
          path: dist/
      - name: Publish the release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.changelog_entry.outputs.log_entry }}
          files: |
            dist/*
